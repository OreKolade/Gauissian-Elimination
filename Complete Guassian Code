

# -*- coding: utf-8 -*-
"""
Created on Mon Jul  3 17:13:13 2017

@author: OLUSOJI
"""
#Needed for array() and dot()
from numpy import *

def print_matrix(M_lol):
    matrix = array(M_lol)
    print (matrix)

def  get_lead_ind(row) :
    for elem in row:
        if elem != 0 :
            return row.index(elem)
        else:
            continue
    return len (row)

def get_row_to_swap(M, start_i):
    length_of_list = (len(M) - 1)
    n = start_i  
    b = len(M[0])
    while(n <= length_of_list):
        non_zero_index = get_lead_ind(M[n])
        if (non_zero_index < b):
            list_to_return = M[n]
            b = non_zero_index 
            n += 1
        else:
            n += 1
    return M.index (list_to_return) 

def add_rows_coefs(r1, c1, r2, c2):
    new_r1 =[i* c1 for i in r1 ]
    new_r2 =[i* c2 for i in r2 ]
    list_to_return= [sum(i) for i in zip(new_r1,new_r2)]
    return list_to_return 
        
def eliminate (M, row_to_sub, best_lead_ind):
    n = row_to_sub + 1
    while (n <= (len(M)-1)):
        if (M[n][best_lead_ind] > 0 and M[row_to_sub][best_lead_ind] > 0  ): ### Is positive and 1
            M[n] = add_rows_coefs(M[row_to_sub], (M[n][best_lead_ind] * -1)/M[row_to_sub][best_lead_ind], M[n], 1)
            n += 1
        elif (M[n][best_lead_ind] < 0 and M[row_to_sub][best_lead_ind] < 0 ): ## Is Negative
            M[n] = add_rows_coefs(M[row_to_sub], (abs(M[n][best_lead_ind])) / M[row_to_sub][best_lead_ind], M[n], 1 )
            n += 1
        elif ( (M[n][best_lead_ind] < 0 and M[row_to_sub][best_lead_ind] > 0 ) or (M[n][best_lead_ind] > 0 and M[row_to_sub][best_lead_ind] <0 ) ) :
            M[n] = add_rows_coefs(M[row_to_sub], abs ( (M[n][best_lead_ind]) /( M[row_to_sub][best_lead_ind])), M[n],1 )
            n += 1
        elif (M[n][best_lead_ind]== 0):
            n += 1

    print("This is the end array:- ","\n", array(M)) 
    
def eliminate_back (M, row_to_sub, best_lead_ind):
    n = row_to_sub - 1
    while ( n >= 0):
        if (M[n][best_lead_ind] > 0 and M[row_to_sub][best_lead_ind] > 0 ):
           M[n] = add_rows_coefs(M[row_to_sub], (M[n][best_lead_ind] * -1)/M[row_to_sub][best_lead_ind], M[n], 1)
           n -= 1
        elif (M[n][best_lead_ind] < 0 and M[row_to_sub][best_lead_ind] < 0 ): ## Is Negative
            M[n] = add_rows_coefs(M[row_to_sub], (abs(M[n][best_lead_ind])) / M[row_to_sub][best_lead_ind], M[n], 1 )
            n -= 1
        elif ( (M[n][best_lead_ind] < 0 and M[row_to_sub][best_lead_ind] > 0 ) or (M[n][best_lead_ind] > 0 and M[row_to_sub][best_lead_ind] <0 ) ) :
            M[n] = add_rows_coefs(M[row_to_sub], abs ( (M[n][best_lead_ind]) /( M[row_to_sub][best_lead_ind])), M[n],1 )
            n -= 1
        elif (M[n][best_lead_ind]== 0):
            n -= 1

def swap(M,i,j):
    M[i],M[j] = M[j],M[i]
    
def forward_step(M):
    i = 0
    while (i <= len(M)-1):
        print ("Now looking at Row",i)
        print ("Swapping Rows",i,"and",get_row_to_swap(M, i))
        swap(M,i,get_row_to_swap(M, i))
        print ("The Matrix is currently:")
        print_matrix(M)
        print("Adding row",i,"to rows below it to eliminate coefficients in column",get_lead_ind(M[i]))
        eliminate (M, i,get_lead_ind(M[i]) )
        i += 1

def backward_step(M):
    print ("Now performing the backward step")
    i = (len(M) - 1)
    while (i >= 0):
        print ("This is the leading index:",get_lead_ind(M[i]))
        eliminate_back(M,i,get_lead_ind(M[i]))
        print ("Adding row",i,"to rows above it to eliminate coefficients in column",get_lead_ind(M[i]))
        print ("The matrix is currently:")
        print_matrix(M)
        i -= 1
    i =0
    while(i <= (len(M)-1)):
        index_lead_coeff = get_lead_ind(M[i])
        lead_coeff = M[i][index_lead_coeff]
        M[i] = [x / lead_coeff for x in M[i]] 
        i += 1
    
def solve():
    forward_step(M)       
    print("The Forward Step is Done")
    backward_step(M)  
    print("The Backward Step is Done")
    print_matrix(M)
    print("Your X is:",M[0][-1])
    print("Your Y is:",M[1][-1])
    print("Your Z is:",M[2][-1])
    
if __name__ == '__main__':
    M = [[1,1,1,3],[2,3,7,0],[1,3,-2,17]]
    solve()
    
"""
#Compute M*x for matrix M and vector x by using
#dot. To do that, we need to obtain arrays
#M and x
M = array([[1,-2,3],[3,10,1],[1,5,3]])
x = array([75,10,-11])
b = dot(M,x)        

print(M)
#[[ 1 -2  3]
# [ 3 10  1]
# [ 1  5  3]]

#To obtain a list of lists from the array M, we use .tolist()
M_listoflists = M.tolist() 

print(M_listoflists) #[[1, -2, 3], [3, 10, 1], [1, 5, 3]]
"""
